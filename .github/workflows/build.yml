name: build
on:
  push:
    branches:
      - master
    tags-ignore:
      - "*"  
  pull_request:
    branches: 
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: 01 Checkout Code
      uses: actions/checkout@v2
    - name: 02 Setup .Net SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          5.0.100
          6.0.100
    - name: 03 Build with dotnet
      run: dotnet build
  code-check-format:
    runs-on: ubuntu-latest
    steps:
    - name: 01 Checkout Code
      uses: actions/checkout@v2
    - name: 02 Setup .Net SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          5.0.100
          6.0.100
    - name: 03 Restore Dotnet Tool
      run: dotnet tool restore
    - name: 04 Check Code Format
      run: dotnet format --verify-no-changes 
  code-scan-sonar:
    runs-on: ubuntu-latest
    steps:
    - name: 01 Checkout Code
      uses: actions/checkout@v2
    - name: 02 Setup .Net SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          5.0.100
          6.0.100
    - name: 03 Setup JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: 04 Install SonarScanner
      run:  dotnet tool restore
    - name: 05 Begin Scan With SonarCloud
      run:  dotnet sonarscanner begin /k:"yscorecore_flytiger" /o:"yscorecore" /d:sonar.login="${{secrets.SONAR_TOKEN}}" /d:sonar.host.url="https://sonarcloud.io"
    - name: 06 Build with dotnet
      run: dotnet build
    - name: 07 End Scan With SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run:  dotnet sonarscanner end /d:sonar.login="${{secrets.SONAR_TOKEN}}"
  test:
    runs-on: ubuntu-latest
    steps:
    - name: 01 Checkout Code
      uses: actions/checkout@v1
    - name: 02 Setup .Net SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          6.0.100
    - name: 03 Restore Dotnet Tool
      run: dotnet tool restore
    - name: 04 Run Unit test
      run: dotnet test --no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[*Test]*"
    - name: 05 Combin All Test Report
      run: dotnet reportgenerator -reports:test-coverages/**/coverage.cobertura.xml -reporttype:cobertura -targetdir:.
    - name: 06 Save Artifact
      uses: actions/upload-artifact@v3
      with:
        name: cobertura_report
        path: ./Cobertura.xml
    - name: 07 Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        fail_ci_if_error: true