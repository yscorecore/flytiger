<?xml version="1.0" encoding="utf-8" ?>
<case>
    <input>
        <code>
            <![CDATA[
namespace ConsoleApp2
{
    public class UserInfo
    {
        public string ABC { get; set; }
        
    }

    public partial class TUser
    {
        public C1 A{ get; set;}
        public C2 AB{ get; set;}
    }
    public class C1
    {
        public C3 B {get;set;}
    }
    public class C2
    {
        public string D{get;set;}
    }
    public class C3
    {
        public string C{get;set;}
    }
}
            
            ]]>
        </code>
        <code>
            <![CDATA[
using FlyTiger;
using FlyTiger.Generator.UnitTest;
namespace ConsoleApp2
{
    [MapperAttribute(typeof(TUser), typeof(UserInfo))]
    partial class Convertors
    {

    }
}
        ]]>
        </code>
    </input>
    <output>
        <code file="FlyTiger.MapperExtensions.g.cs">
            <![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
namespace FlyTiger
{
    static class MapperExtensions
    {
        private static IEnumerable<T> EachItem<T>(this IEnumerable<T> source, Action<T> handler)
        {
            foreach (var item in source)
            {
                handler(item);
                yield return item;
            }
        }
        private static global::ConsoleApp2.UserInfo ToConsoleApp2UserInfo(this global::ConsoleApp2.TUser source)
        {
            if (source == null) return default;
            return new global::ConsoleApp2.UserInfo
            {
                ABC = source.A.B.C,
            };
        }
        private static void ToConsoleApp2UserInfo(this global::ConsoleApp2.TUser source, global::ConsoleApp2.UserInfo target)
        {
            if (source == null) return;
            if (target == null) return;
            target.ABC = source.A.B.C;
        }
        private static IEnumerable<global::ConsoleApp2.UserInfo> ToConsoleApp2UserInfo(this IEnumerable<global::ConsoleApp2.TUser> source)
        {
            return source?.Select(p => new global::ConsoleApp2.UserInfo
            {
                ABC = p.A.B.C,
            });
        }
        private static IQueryable<global::ConsoleApp2.UserInfo> ToConsoleApp2UserInfo(this IQueryable<global::ConsoleApp2.TUser> source)
        {
            return source?.Select(p => new global::ConsoleApp2.UserInfo
            {
                ABC = p.A.B.C,
            });
        }
        public static T To<T>(this global::ConsoleApp2.TUser source) where T:new()
        {
            if (source == null) return default;
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                return (T)(object)ToConsoleApp2UserInfo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
        public static T To<T>(this global::ConsoleApp2.TUser source, Action<T> postHandler) where T:new()
        {
            var result = source.To<T>();
            if (postHandler != null)
            {
                postHandler(result);
            }
            return result;
        }
        public static void To<T>(this global::ConsoleApp2.TUser source, T target) where T:class
        {
            if (source == null) return;
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                ToConsoleApp2UserInfo(source, (global::ConsoleApp2.UserInfo)(object)target);
                return;
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::ConsoleApp2.TUser> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                return (IEnumerable<T>)ToConsoleApp2UserInfo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::ConsoleApp2.TUser> source, Action<T> postHandler) where T : new()
        {
            return source == null || postHandler == null ? source.To<T>() : source.To<T>().EachItem(postHandler);
        }
        public static IQueryable<T> To<T>(this IQueryable<global::ConsoleApp2.TUser> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                return (IQueryable<T>)ToConsoleApp2UserInfo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
    }
}]]>
        </code>
    </output>
</case>