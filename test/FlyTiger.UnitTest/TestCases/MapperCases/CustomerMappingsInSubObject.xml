<?xml version="1.0" encoding="utf-8" ?>
<case>
    <input>
        <code>
            <![CDATA[
using System;
using System.Collections.Generic;            
namespace ConsoleApp2
{
     public class MealDto
    {
        public List<MealMaterialDto> MealMaterials { get; set; }
    }

    public class MealMaterialDto
    {
        public string MaterialName { get; set; }
    }

    public class MealV2 
    {
        public string Name { get; set; }
        public string Kind { get; set; }
        public List<MealMaterialV2> MealMaterials { get; set; }
    }
    public class MealMaterialV2 
    {
        public Guid MealV2Id { get; set; }

        public Material Material { get; set; }
        public Guid MaterialId { get; set; }
        public decimal? Amount { get; set; }
    }
    public class Material
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
    }

    
}
            
            ]]>
        </code>
        <code>
            <![CDATA[
using FlyTiger;
using FlyTiger.Generator.UnitTest;
namespace ConsoleApp2
{
    [MapperAttribute(typeof(MealV2), typeof(MealDto), 
            CustomMappings = new string[] {
            
            })]
    [MapperAttribute(typeof(MealMaterialV2), typeof(MealMaterialDto), 
            CustomMappings = new string[] {
                "MaterialName=$.Material.Name"
            })]
    partial class Convertors
    {

    }
}
        ]]>
        </code>
    </input>
    <output>
        <code file="FlyTiger.MapperExtensions.g.cs">
            <![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
namespace FlyTiger
{
    static class MapperExtensions
    {
        private static global::ConsoleApp2.MealDto ToConsoleApp2MealDto(this global::ConsoleApp2.MealV2 source)
        {
            if (source == null) return default;
            return new global::ConsoleApp2.MealDto
            {
                MealMaterials = source.MealMaterials == null ? null : source.MealMaterials.Select(p => p == null ? default(global::ConsoleApp2.MealMaterialDto) : new global::ConsoleApp2.MealMaterialDto
                {
                    MaterialName = p.Material.Name,
                }).ToList(),
            };
        }
        private static void ToConsoleApp2MealDto(this global::ConsoleApp2.MealV2 source, global::ConsoleApp2.MealDto target)
        {
            if (source == null) return;
            if (target == null) return;
            target.MealMaterials = source.MealMaterials == null ? null : source.MealMaterials.Select(p => p == null ? default(global::ConsoleApp2.MealMaterialDto) : new global::ConsoleApp2.MealMaterialDto
            {
                MaterialName = p.Material.Name,
            }).ToList();
        }
        private static IEnumerable<global::ConsoleApp2.MealDto> ToConsoleApp2MealDto(this IEnumerable<global::ConsoleApp2.MealV2> source)
        {
            return source?.Select(p => new global::ConsoleApp2.MealDto
            {
                MealMaterials = p.MealMaterials == null ? null : p.MealMaterials.Select(p => p == null ? default(global::ConsoleApp2.MealMaterialDto) : new global::ConsoleApp2.MealMaterialDto
                {
                    MaterialName = p.Material.Name,
                }).ToList(),
            });
        }
        private static IQueryable<global::ConsoleApp2.MealDto> ToConsoleApp2MealDto(this IQueryable<global::ConsoleApp2.MealV2> source)
        {
            return source?.Select(p => new global::ConsoleApp2.MealDto
            {
                MealMaterials = p.MealMaterials == null ? null : p.MealMaterials.Select(p => p == null ? default(global::ConsoleApp2.MealMaterialDto) : new global::ConsoleApp2.MealMaterialDto
                {
                    MaterialName = p.Material.Name,
                }).ToList(),
            });
        }
        private static global::ConsoleApp2.MealMaterialDto ToConsoleApp2MealMaterialDto(this global::ConsoleApp2.MealMaterialV2 source)
        {
            if (source == null) return default;
            return new global::ConsoleApp2.MealMaterialDto
            {
                MaterialName = source.Material.Name,
            };
        }
        private static void ToConsoleApp2MealMaterialDto(this global::ConsoleApp2.MealMaterialV2 source, global::ConsoleApp2.MealMaterialDto target)
        {
            if (source == null) return;
            if (target == null) return;
            target.MaterialName = source.Material.Name;
        }
        private static IEnumerable<global::ConsoleApp2.MealMaterialDto> ToConsoleApp2MealMaterialDto(this IEnumerable<global::ConsoleApp2.MealMaterialV2> source)
        {
            return source?.Select(p => new global::ConsoleApp2.MealMaterialDto
            {
                MaterialName = p.Material.Name,
            });
        }
        private static IQueryable<global::ConsoleApp2.MealMaterialDto> ToConsoleApp2MealMaterialDto(this IQueryable<global::ConsoleApp2.MealMaterialV2> source)
        {
            return source?.Select(p => new global::ConsoleApp2.MealMaterialDto
            {
                MaterialName = p.Material.Name,
            });
        }
        public static T To<T>(this global::ConsoleApp2.MealV2 source) where T:new()
        {
            if (source == null) return default;
            if (typeof(T) == typeof(global::ConsoleApp2.MealDto))
            {
                return (T)(object)ToConsoleApp2MealDto(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealV2)}' to '{typeof(T)}'.");
        }
        public static void To<T>(this global::ConsoleApp2.MealV2 source, T target) where T:class
        {
            if (source == null) return;
            if (typeof(T) == typeof(global::ConsoleApp2.MealDto))
            {
                ToConsoleApp2MealDto(source, (global::ConsoleApp2.MealDto)(object)target);
                return;
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealV2)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::ConsoleApp2.MealV2> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.MealDto))
            {
                return (IEnumerable<T>)ToConsoleApp2MealDto(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealV2)}' to '{typeof(T)}'.");
        }
        public static IQueryable<T> To<T>(this IQueryable<global::ConsoleApp2.MealV2> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.MealDto))
            {
                return (IQueryable<T>)ToConsoleApp2MealDto(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealV2)}' to '{typeof(T)}'.");
        }
        public static T To<T>(this global::ConsoleApp2.MealMaterialV2 source) where T:new()
        {
            if (source == null) return default;
            if (typeof(T) == typeof(global::ConsoleApp2.MealMaterialDto))
            {
                return (T)(object)ToConsoleApp2MealMaterialDto(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealMaterialV2)}' to '{typeof(T)}'.");
        }
        public static void To<T>(this global::ConsoleApp2.MealMaterialV2 source, T target) where T:class
        {
            if (source == null) return;
            if (typeof(T) == typeof(global::ConsoleApp2.MealMaterialDto))
            {
                ToConsoleApp2MealMaterialDto(source, (global::ConsoleApp2.MealMaterialDto)(object)target);
                return;
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealMaterialV2)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::ConsoleApp2.MealMaterialV2> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.MealMaterialDto))
            {
                return (IEnumerable<T>)ToConsoleApp2MealMaterialDto(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealMaterialV2)}' to '{typeof(T)}'.");
        }
        public static IQueryable<T> To<T>(this IQueryable<global::ConsoleApp2.MealMaterialV2> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.MealMaterialDto))
            {
                return (IQueryable<T>)ToConsoleApp2MealMaterialDto(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.MealMaterialV2)}' to '{typeof(T)}'.");
        }
    }
}]]>
        </code>
    </output>
</case>