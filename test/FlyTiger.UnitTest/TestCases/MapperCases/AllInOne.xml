<?xml version="1.0" encoding="utf-8" ?>
<case>
    <input>
        <code>
            <![CDATA[
using System.Collections.Generic;
using System.Linq;
namespace SourceGenerator.ConvertTo
{
    public class From
    {
        public string StrProp { get; set; }
        public int IntProp { get; set; }

        public int? NullableIntProp { get; set; }
        public int NullableIntProp2 { get; set; }
        public OneEnum OneEnumProp { get; set; }
        public OneEnum? NullableOneEnumProp { get; set; }
        public OneEnum NullableOneEnumProp2 { get; set; }

        public OneStruct OneStructProp { get; set; }

        public OneStruct? NullableOneStructProp { get; set; }

        public OneStruct NullableOneStructProp2 { get; set; }

        public OneClass OneClassProp { get; set; }
        public OneClass OneClassProp2 { get; set; }

        public IEnumerable<OneClass> ClassList { get; set; }

        public IEnumerable<OneClass> ClassList2 { get; set; }

        public string[] ArrayStringToArray { get; set; }
        public string[] ArrayStringToList { get; set; }
        public string[] ArrayStringToIList { get; set; }
        public string[] ArrayStringToICollection { get; set; }
        public string[] ArrayStringToIEnumerable { get; set; }
        public string[] ArrayStringToIQueryable { get; set; }
    }

    public enum OneEnum
    {
        One,
    }
    public struct OneStruct
    {
        public string StrProp { get; set; }
    }
    public struct OneClass
    {
        public string StrProp { get; set; }
    }
    public struct OtherStruct
    {
        public string StrProp { get; set; }
        public int IntProp { get; set; }
    }
    public struct OtherClass
    {
        public string StrProp { get; set; }
        public int IntProp { get; set; }
    }

    public class To
    {
        public string StrProp { get; set; }
        public int IntProp { get; set; }
        public int? NullableIntProp { get; set; }
        public int? NullableIntProp2 { get; set; }
        public OneEnum OneEnumProp { get; set; }
        public OneEnum? NullableOneEnumProp { get; set; }
        public OneEnum? NullableOneEnumProp2 { get; set; }

        public OneStruct OneStructProp { get; set; }

        public OneStruct? NullableOneStructProp { get; set; }

        public OneStruct? NullableOneStructProp2 { get; set; }

        public OneClass OneClassProp { get; set; }

        public OtherClass OneClassProp2 { get; set; }

        public List<OneClass> ClassList { get; set; }
        public List<OtherClass> ClassList2 { get; set; }

        public string[] ArrayStringToArray { get; set; }

        public List<string> ArrayStringToList { get; set; }
        public IList<string> ArrayStringToIList { get; set; }

        public ICollection<string> ArrayStringToICollection { get; set; }

        public IEnumerable<string> ArrayStringToIEnumerable { get; set; }

        public IQueryable<string> ArrayStringToIQueryable { get; set; }
    }

    [FlyTiger.Mapper(typeof(From),typeof(To))]
    [FlyTiger.Mapper(typeof(To),typeof(From))]
    public partial class Convertors
    { 
    
    }
}
            
            ]]>
        </code>
    </input>
    <output>
        <code file="FlyTiger.MapperExtensions.g.cs">
            <![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
namespace FlyTiger
{
    static class MapperExtensions
    {
        private static IEnumerable<T> EachItem<T>(this IEnumerable<T> source, Action<T> handler)
        {
            foreach (var item in source)
            {
                handler(item);
                yield return item;
            }
        }
        private static global::SourceGenerator.ConvertTo.To ToSourceGeneratorConvertToTo(this global::SourceGenerator.ConvertTo.From source)
        {
            if (source == null) return default;
            return new global::SourceGenerator.ConvertTo.To
            {
                StrProp = source.StrProp,
                IntProp = source.IntProp,
                NullableIntProp = source.NullableIntProp,
                NullableIntProp2 = source.NullableIntProp2,
                OneEnumProp = source.OneEnumProp,
                NullableOneEnumProp = source.NullableOneEnumProp,
                NullableOneEnumProp2 = source.NullableOneEnumProp2,
                OneStructProp = source.OneStructProp,
                NullableOneStructProp = source.NullableOneStructProp,
                NullableOneStructProp2 = source.NullableOneStructProp2,
                OneClassProp = source.OneClassProp,
                OneClassProp2 = new global::SourceGenerator.ConvertTo.OtherClass
                {
                    StrProp = source.OneClassProp2.StrProp,
                },
                ClassList = source.ClassList == null ? null : source.ClassList.ToList(),
                ClassList2 = source.ClassList2 == null ? null : source.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OtherClass
                {
                    StrProp = p.StrProp,
                }).ToList(),
                ArrayStringToArray = source.ArrayStringToArray,
                ArrayStringToList = source.ArrayStringToList == null ? null : source.ArrayStringToList.ToList(),
                ArrayStringToIList = source.ArrayStringToIList,
                ArrayStringToICollection = source.ArrayStringToICollection,
                ArrayStringToIEnumerable = source.ArrayStringToIEnumerable,
                ArrayStringToIQueryable = source.ArrayStringToIQueryable == null ? null : source.ArrayStringToIQueryable.AsQueryable(),
            };
        }
        private static void ToSourceGeneratorConvertToTo(this global::SourceGenerator.ConvertTo.From source, global::SourceGenerator.ConvertTo.To target)
        {
            if (source == null) return;
            if (target == null) return;
            target.StrProp = source.StrProp;
            target.IntProp = source.IntProp;
            target.NullableIntProp = source.NullableIntProp;
            target.NullableIntProp2 = source.NullableIntProp2;
            target.OneEnumProp = source.OneEnumProp;
            target.NullableOneEnumProp = source.NullableOneEnumProp;
            target.NullableOneEnumProp2 = source.NullableOneEnumProp2;
            target.OneStructProp = source.OneStructProp;
            target.NullableOneStructProp = source.NullableOneStructProp;
            target.NullableOneStructProp2 = source.NullableOneStructProp2;
            target.OneClassProp = source.OneClassProp;
            target.OneClassProp2 = new global::SourceGenerator.ConvertTo.OtherClass
            {
                StrProp = source.OneClassProp2.StrProp,
            };
            target.ClassList = source.ClassList == null ? null : source.ClassList.ToList();
            target.ClassList2 = source.ClassList2 == null ? null : source.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OtherClass
            {
                StrProp = p.StrProp,
            }).ToList();
            target.ArrayStringToArray = source.ArrayStringToArray;
            target.ArrayStringToList = source.ArrayStringToList == null ? null : source.ArrayStringToList.ToList();
            target.ArrayStringToIList = source.ArrayStringToIList;
            target.ArrayStringToICollection = source.ArrayStringToICollection;
            target.ArrayStringToIEnumerable = source.ArrayStringToIEnumerable;
            target.ArrayStringToIQueryable = source.ArrayStringToIQueryable == null ? null : source.ArrayStringToIQueryable.AsQueryable();
        }
        private static IEnumerable<global::SourceGenerator.ConvertTo.To> ToSourceGeneratorConvertToTo(this IEnumerable<global::SourceGenerator.ConvertTo.From> source)
        {
            return source?.Select(p => new global::SourceGenerator.ConvertTo.To
            {
                StrProp = p.StrProp,
                IntProp = p.IntProp,
                NullableIntProp = p.NullableIntProp,
                NullableIntProp2 = p.NullableIntProp2,
                OneEnumProp = p.OneEnumProp,
                NullableOneEnumProp = p.NullableOneEnumProp,
                NullableOneEnumProp2 = p.NullableOneEnumProp2,
                OneStructProp = p.OneStructProp,
                NullableOneStructProp = p.NullableOneStructProp,
                NullableOneStructProp2 = p.NullableOneStructProp2,
                OneClassProp = p.OneClassProp,
                OneClassProp2 = new global::SourceGenerator.ConvertTo.OtherClass
                {
                    StrProp = p.OneClassProp2.StrProp,
                },
                ClassList = p.ClassList == null ? null : p.ClassList.ToList(),
                ClassList2 = p.ClassList2 == null ? null : p.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OtherClass
                {
                    StrProp = p.StrProp,
                }).ToList(),
                ArrayStringToArray = p.ArrayStringToArray,
                ArrayStringToList = p.ArrayStringToList == null ? null : p.ArrayStringToList.ToList(),
                ArrayStringToIList = p.ArrayStringToIList,
                ArrayStringToICollection = p.ArrayStringToICollection,
                ArrayStringToIEnumerable = p.ArrayStringToIEnumerable,
                ArrayStringToIQueryable = p.ArrayStringToIQueryable == null ? null : p.ArrayStringToIQueryable.AsQueryable(),
            });
        }
        private static IQueryable<global::SourceGenerator.ConvertTo.To> ToSourceGeneratorConvertToTo(this IQueryable<global::SourceGenerator.ConvertTo.From> source)
        {
            return source?.Select(p => new global::SourceGenerator.ConvertTo.To
            {
                StrProp = p.StrProp,
                IntProp = p.IntProp,
                NullableIntProp = p.NullableIntProp,
                NullableIntProp2 = p.NullableIntProp2,
                OneEnumProp = p.OneEnumProp,
                NullableOneEnumProp = p.NullableOneEnumProp,
                NullableOneEnumProp2 = p.NullableOneEnumProp2,
                OneStructProp = p.OneStructProp,
                NullableOneStructProp = p.NullableOneStructProp,
                NullableOneStructProp2 = p.NullableOneStructProp2,
                OneClassProp = p.OneClassProp,
                OneClassProp2 = new global::SourceGenerator.ConvertTo.OtherClass
                {
                    StrProp = p.OneClassProp2.StrProp,
                },
                ClassList = p.ClassList == null ? null : p.ClassList.ToList(),
                ClassList2 = p.ClassList2 == null ? null : p.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OtherClass
                {
                    StrProp = p.StrProp,
                }).ToList(),
                ArrayStringToArray = p.ArrayStringToArray,
                ArrayStringToList = p.ArrayStringToList == null ? null : p.ArrayStringToList.ToList(),
                ArrayStringToIList = p.ArrayStringToIList,
                ArrayStringToICollection = p.ArrayStringToICollection,
                ArrayStringToIEnumerable = p.ArrayStringToIEnumerable,
                ArrayStringToIQueryable = p.ArrayStringToIQueryable == null ? null : p.ArrayStringToIQueryable.AsQueryable(),
            });
        }
        private static global::SourceGenerator.ConvertTo.From ToSourceGeneratorConvertToFrom(this global::SourceGenerator.ConvertTo.To source)
        {
            if (source == null) return default;
            return new global::SourceGenerator.ConvertTo.From
            {
                StrProp = source.StrProp,
                IntProp = source.IntProp,
                NullableIntProp = source.NullableIntProp,
                OneEnumProp = source.OneEnumProp,
                NullableOneEnumProp = source.NullableOneEnumProp,
                OneStructProp = source.OneStructProp,
                NullableOneStructProp = source.NullableOneStructProp,
                NullableOneStructProp2 = new global::SourceGenerator.ConvertTo.OneStruct
                {
                },
                OneClassProp = source.OneClassProp,
                OneClassProp2 = new global::SourceGenerator.ConvertTo.OneClass
                {
                    StrProp = source.OneClassProp2.StrProp,
                },
                ClassList = source.ClassList,
                ClassList2 = source.ClassList2 == null ? null : source.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OneClass
                {
                    StrProp = p.StrProp,
                }).ToList(),
                ArrayStringToArray = source.ArrayStringToArray,
                ArrayStringToList = source.ArrayStringToList == null ? null : source.ArrayStringToList.ToArray(),
                ArrayStringToIList = source.ArrayStringToIList == null ? null : source.ArrayStringToIList.ToArray(),
                ArrayStringToICollection = source.ArrayStringToICollection == null ? null : source.ArrayStringToICollection.ToArray(),
                ArrayStringToIEnumerable = source.ArrayStringToIEnumerable == null ? null : source.ArrayStringToIEnumerable.ToArray(),
                ArrayStringToIQueryable = source.ArrayStringToIQueryable == null ? null : source.ArrayStringToIQueryable.ToArray(),
            };
        }
        private static void ToSourceGeneratorConvertToFrom(this global::SourceGenerator.ConvertTo.To source, global::SourceGenerator.ConvertTo.From target)
        {
            if (source == null) return;
            if (target == null) return;
            target.StrProp = source.StrProp;
            target.IntProp = source.IntProp;
            target.NullableIntProp = source.NullableIntProp;
            target.OneEnumProp = source.OneEnumProp;
            target.NullableOneEnumProp = source.NullableOneEnumProp;
            target.OneStructProp = source.OneStructProp;
            target.NullableOneStructProp = source.NullableOneStructProp;
            target.NullableOneStructProp2 = new global::SourceGenerator.ConvertTo.OneStruct
            {
            };
            target.OneClassProp = source.OneClassProp;
            target.OneClassProp2 = new global::SourceGenerator.ConvertTo.OneClass
            {
                StrProp = source.OneClassProp2.StrProp,
            };
            target.ClassList = source.ClassList;
            target.ClassList2 = source.ClassList2 == null ? null : source.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OneClass
            {
                StrProp = p.StrProp,
            }).ToList();
            target.ArrayStringToArray = source.ArrayStringToArray;
            target.ArrayStringToList = source.ArrayStringToList == null ? null : source.ArrayStringToList.ToArray();
            target.ArrayStringToIList = source.ArrayStringToIList == null ? null : source.ArrayStringToIList.ToArray();
            target.ArrayStringToICollection = source.ArrayStringToICollection == null ? null : source.ArrayStringToICollection.ToArray();
            target.ArrayStringToIEnumerable = source.ArrayStringToIEnumerable == null ? null : source.ArrayStringToIEnumerable.ToArray();
            target.ArrayStringToIQueryable = source.ArrayStringToIQueryable == null ? null : source.ArrayStringToIQueryable.ToArray();
        }
        private static IEnumerable<global::SourceGenerator.ConvertTo.From> ToSourceGeneratorConvertToFrom(this IEnumerable<global::SourceGenerator.ConvertTo.To> source)
        {
            return source?.Select(p => new global::SourceGenerator.ConvertTo.From
            {
                StrProp = p.StrProp,
                IntProp = p.IntProp,
                NullableIntProp = p.NullableIntProp,
                OneEnumProp = p.OneEnumProp,
                NullableOneEnumProp = p.NullableOneEnumProp,
                OneStructProp = p.OneStructProp,
                NullableOneStructProp = p.NullableOneStructProp,
                NullableOneStructProp2 = new global::SourceGenerator.ConvertTo.OneStruct
                {
                },
                OneClassProp = p.OneClassProp,
                OneClassProp2 = new global::SourceGenerator.ConvertTo.OneClass
                {
                    StrProp = p.OneClassProp2.StrProp,
                },
                ClassList = p.ClassList,
                ClassList2 = p.ClassList2 == null ? null : p.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OneClass
                {
                    StrProp = p.StrProp,
                }).ToList(),
                ArrayStringToArray = p.ArrayStringToArray,
                ArrayStringToList = p.ArrayStringToList == null ? null : p.ArrayStringToList.ToArray(),
                ArrayStringToIList = p.ArrayStringToIList == null ? null : p.ArrayStringToIList.ToArray(),
                ArrayStringToICollection = p.ArrayStringToICollection == null ? null : p.ArrayStringToICollection.ToArray(),
                ArrayStringToIEnumerable = p.ArrayStringToIEnumerable == null ? null : p.ArrayStringToIEnumerable.ToArray(),
                ArrayStringToIQueryable = p.ArrayStringToIQueryable == null ? null : p.ArrayStringToIQueryable.ToArray(),
            });
        }
        private static IQueryable<global::SourceGenerator.ConvertTo.From> ToSourceGeneratorConvertToFrom(this IQueryable<global::SourceGenerator.ConvertTo.To> source)
        {
            return source?.Select(p => new global::SourceGenerator.ConvertTo.From
            {
                StrProp = p.StrProp,
                IntProp = p.IntProp,
                NullableIntProp = p.NullableIntProp,
                OneEnumProp = p.OneEnumProp,
                NullableOneEnumProp = p.NullableOneEnumProp,
                OneStructProp = p.OneStructProp,
                NullableOneStructProp = p.NullableOneStructProp,
                NullableOneStructProp2 = new global::SourceGenerator.ConvertTo.OneStruct
                {
                },
                OneClassProp = p.OneClassProp,
                OneClassProp2 = new global::SourceGenerator.ConvertTo.OneClass
                {
                    StrProp = p.OneClassProp2.StrProp,
                },
                ClassList = p.ClassList,
                ClassList2 = p.ClassList2 == null ? null : p.ClassList2.Select(p => new global::SourceGenerator.ConvertTo.OneClass
                {
                    StrProp = p.StrProp,
                }).ToList(),
                ArrayStringToArray = p.ArrayStringToArray,
                ArrayStringToList = p.ArrayStringToList == null ? null : p.ArrayStringToList.ToArray(),
                ArrayStringToIList = p.ArrayStringToIList == null ? null : p.ArrayStringToIList.ToArray(),
                ArrayStringToICollection = p.ArrayStringToICollection == null ? null : p.ArrayStringToICollection.ToArray(),
                ArrayStringToIEnumerable = p.ArrayStringToIEnumerable == null ? null : p.ArrayStringToIEnumerable.ToArray(),
                ArrayStringToIQueryable = p.ArrayStringToIQueryable == null ? null : p.ArrayStringToIQueryable.ToArray(),
            });
        }
        public static T To<T>(this global::SourceGenerator.ConvertTo.From source) where T:new()
        {
            if (source == null) return default;
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.To))
            {
                return (T)(object)ToSourceGeneratorConvertToTo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.From)}' to '{typeof(T)}'.");
        }
        public static T To<T>(this global::SourceGenerator.ConvertTo.From source, Action<T> postHandler) where T:new()
        {
            var result = source.To<T>();
            if (postHandler != null)
            {
                postHandler(result);
            }
            return result;
        }
        public static void To<T>(this global::SourceGenerator.ConvertTo.From source, T target) where T:class
        {
            if (source == null) return;
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.To))
            {
                ToSourceGeneratorConvertToTo(source, (global::SourceGenerator.ConvertTo.To)(object)target);
                return;
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.From)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::SourceGenerator.ConvertTo.From> source) where T:new()
        {
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.To))
            {
                return (IEnumerable<T>)ToSourceGeneratorConvertToTo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.From)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::SourceGenerator.ConvertTo.From> source, Action<T> postHandler) where T : new()
        {
            return source == null || postHandler == null ? source.To<T>() : source.To<T>().EachItem(postHandler);
        }
        public static IQueryable<T> To<T>(this IQueryable<global::SourceGenerator.ConvertTo.From> source) where T:new()
        {
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.To))
            {
                return (IQueryable<T>)ToSourceGeneratorConvertToTo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.From)}' to '{typeof(T)}'.");
        }
        public static T To<T>(this global::SourceGenerator.ConvertTo.To source) where T:new()
        {
            if (source == null) return default;
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.From))
            {
                return (T)(object)ToSourceGeneratorConvertToFrom(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.To)}' to '{typeof(T)}'.");
        }
        public static T To<T>(this global::SourceGenerator.ConvertTo.To source, Action<T> postHandler) where T:new()
        {
            var result = source.To<T>();
            if (postHandler != null)
            {
                postHandler(result);
            }
            return result;
        }
        public static void To<T>(this global::SourceGenerator.ConvertTo.To source, T target) where T:class
        {
            if (source == null) return;
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.From))
            {
                ToSourceGeneratorConvertToFrom(source, (global::SourceGenerator.ConvertTo.From)(object)target);
                return;
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.To)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::SourceGenerator.ConvertTo.To> source) where T:new()
        {
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.From))
            {
                return (IEnumerable<T>)ToSourceGeneratorConvertToFrom(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.To)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::SourceGenerator.ConvertTo.To> source, Action<T> postHandler) where T : new()
        {
            return source == null || postHandler == null ? source.To<T>() : source.To<T>().EachItem(postHandler);
        }
        public static IQueryable<T> To<T>(this IQueryable<global::SourceGenerator.ConvertTo.To> source) where T:new()
        {
            if (typeof(T) == typeof(global::SourceGenerator.ConvertTo.From))
            {
                return (IQueryable<T>)ToSourceGeneratorConvertToFrom(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::SourceGenerator.ConvertTo.To)}' to '{typeof(T)}'.");
        }
    }
}
            ]]>
        </code>
    </output>
</case>