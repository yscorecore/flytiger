<?xml version="1.0" encoding="utf-8" ?>
<case>
    <input>
        <code>
            <![CDATA[
using System.Collections.Generic;
namespace ConsoleApp2
{
    public class UserInfo
    {
        public string Name { get; set; }
        public AddressInfo[] Addresses {get; set;}
    }
    public class AddressInfo
    {
        public string City { get; set; }
    }

    public partial class TUser
    {
        public string Name { get; set; }
        public AddressDto[] Addresses {get; set;}
    }
     public class AddressDto
    {
        public string City { get; set; }
    }
}
            
            ]]>
        </code>
        <code>
            <![CDATA[
using FlyTiger;
using FlyTiger.Generator.UnitTest;
namespace ConsoleApp2
{
    [MapperAttribute(typeof(TUser), typeof(UserInfo))]
    partial class Convertors
    {

    }
}
        ]]>
        </code>
    </input>
    <output>
        <code file="FlyTiger.MapperExtensions.g.cs">
            <![CDATA[
using System;
using System.Collections.Generic;
using System.Linq;
namespace FlyTiger
{
    static class MapperExtensions
    {
        private static IEnumerable<T> EachItem<T>(this IEnumerable<T> source, Action<T> handler)
        {
            foreach (var item in source)
            {
                handler(item);
                yield return item;
            }
        }
        private static global::ConsoleApp2.UserInfo ToConsoleApp2UserInfo(this global::ConsoleApp2.TUser source)
        {
            if (source == null) return default;
            return new global::ConsoleApp2.UserInfo
            {
                Name = source.Name,
                Addresses = source.Addresses == null ? null : source.Addresses.Select(p => p == null ? default(global::ConsoleApp2.AddressInfo) : new global::ConsoleApp2.AddressInfo
                {
                    City = p.City,
                }).ToArray(),
            };
        }
        private static void ToConsoleApp2UserInfo(this global::ConsoleApp2.TUser source, global::ConsoleApp2.UserInfo target)
        {
            if (source == null) return;
            if (target == null) return;
            target.Name = source.Name;
            target.Addresses = source.Addresses == null ? null : source.Addresses.Select(p => p == null ? default(global::ConsoleApp2.AddressInfo) : new global::ConsoleApp2.AddressInfo
            {
                City = p.City,
            }).ToArray();
        }
        private static IEnumerable<global::ConsoleApp2.UserInfo> ToConsoleApp2UserInfo(this IEnumerable<global::ConsoleApp2.TUser> source)
        {
            return source?.Select(p => new global::ConsoleApp2.UserInfo
            {
                Name = p.Name,
                Addresses = p.Addresses == null ? null : p.Addresses.Select(p => p == null ? default(global::ConsoleApp2.AddressInfo) : new global::ConsoleApp2.AddressInfo
                {
                    City = p.City,
                }).ToArray(),
            });
        }
        private static IQueryable<global::ConsoleApp2.UserInfo> ToConsoleApp2UserInfo(this IQueryable<global::ConsoleApp2.TUser> source)
        {
            return source?.Select(p => new global::ConsoleApp2.UserInfo
            {
                Name = p.Name,
                Addresses = p.Addresses == null ? null : p.Addresses.Select(p => p == null ? default(global::ConsoleApp2.AddressInfo) : new global::ConsoleApp2.AddressInfo
                {
                    City = p.City,
                }).ToArray(),
            });
        }
        public static T To<T>(this global::ConsoleApp2.TUser source) where T:new()
        {
            if (source == null) return default;
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                return (T)(object)ToConsoleApp2UserInfo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
        public static T To<T>(this global::ConsoleApp2.TUser source, Action<T> postHandler) where T:new()
        {
            var result = source.To<T>();
            postHandler?.Invoke(result);
            return result;
        }
        public static void To<T>(this global::ConsoleApp2.TUser source, T target) where T:class
        {
            if (source == null) return;
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                ToConsoleApp2UserInfo(source, (global::ConsoleApp2.UserInfo)(object)target);
                return;
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::ConsoleApp2.TUser> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                return (IEnumerable<T>)ToConsoleApp2UserInfo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
        public static IEnumerable<T> To<T>(this IEnumerable<global::ConsoleApp2.TUser> source, Action<T> postHandler) where T : new()
        {
            return source == null || postHandler == null ? source.To<T>() : source.To<T>().EachItem(postHandler);
        }
        public static IQueryable<T> To<T>(this IQueryable<global::ConsoleApp2.TUser> source) where T:new()
        {
            if (typeof(T) == typeof(global::ConsoleApp2.UserInfo))
            {
                return (IQueryable<T>)ToConsoleApp2UserInfo(source);
            }
            throw new NotSupportedException($"Can not convert '{typeof(global::ConsoleApp2.TUser)}' to '{typeof(T)}'.");
        }
    }
}]]>
        </code>
    </output>
</case>